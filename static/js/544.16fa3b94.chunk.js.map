{"version":3,"file":"static/js/544.16fa3b94.chunk.js","mappings":"iRA0HA,UA7Ga,WACX,OAA4BA,EAAAA,EAAAA,UAASC,EAAAA,GAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BH,EAAAA,EAAAA,UAAS,CACnC,CACEI,GAAI,EACJC,YAAa,KACbC,MAAO,GACPC,eAAgB,GAChBC,aAAc,GACdC,aAAc,EACdC,WAAY,KARhB,eAAOC,EAAP,KAAeC,EAAf,KAWA,GAA0BZ,EAAAA,EAAAA,UAAS,GAAnC,eAAOa,EAAP,KAAcC,EAAd,KACA,GAAoCd,EAAAA,EAAAA,UAAS,GAA7C,eAAOe,EAAP,KAAmBC,EAAnB,KACA,GAA0BhB,EAAAA,EAAAA,UAAS,MAAnC,eAAOiB,EAAP,KAAcC,EAAd,KACA,GAA8BlB,EAAAA,EAAAA,WAAS,GAAvC,eAAOmB,EAAP,KAAgBC,EAAhB,KAEA,GAA4CpB,EAAAA,EAAAA,UAAS,GAArD,eAAOqB,EAAP,KAAuBC,EAAvB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,8EACE,KACEC,EAAAA,EAAAA,IAAY,GAAGC,MAAK,SAAAC,GAClBV,EAAcU,EAAKC,aACnBf,EAAUc,EAAKE,QAChB,IACDzB,EAAUF,EAAAA,GAAAA,SAIX,CAHC,MAAOgB,GACPC,EAASD,GACTd,EAAUF,EAAAA,GAAAA,SACX,CAVH,2CAFc,wBAkBd,OAjBAE,EAAUF,EAAAA,GAAAA,SADI,mCAcd4B,GAEAC,OAAOC,iBAAiB,UAAUC,EAAAA,EAAAA,IAAaV,IAExC,WACLQ,OAAOG,oBAAoB,UAAUD,EAAAA,EAAAA,IAAaV,GACnD,CACF,GAAE,IAEHY,QAAQC,IAAId,IAEZE,EAAAA,EAAAA,YAAU,WAAM,wCACd,kGAEQV,GAASE,EAAa,KAF9B,iCAGkCS,EAAAA,EAAAA,IAAYX,GAAOY,MAAK,SAAAW,GAAC,OAAIA,EAAER,OAAN,IAH3D,OAGYS,EAHZ,OAIMzB,GAAU,SAAA0B,GAAC,wBAAQA,IAAR,OAAcD,GAAd,IAJjB,uDAOInB,EAAS,EAAD,IAPZ,0DADc,uBAAC,WAAD,wBAWdW,EACD,GAAE,CAAChB,EAAOE,IAeX,OARMA,EAAa,MAAQF,GACvBO,GAAW,IAKfmB,EAAAA,EAAAA,IAAelB,IAGb,gCACGnB,IAAWD,EAAAA,GAAAA,WACV,iCACE,4CACA,UAAC,IAAD,CACEuC,WAAY7B,EAAO8B,OACnBC,KApBY,WACpB5B,GAAS,SAAAwB,GAAC,OAAIA,EAAI,CAAR,GACX,EAoBSK,OAAQ,KACRxB,QAASA,EACTyB,QAAQ,eAAIC,MAAO,CAAEC,UAAW,UAAxB,wBACRC,YACE,cAAGF,MAAO,CAAEC,UAAW,UAAvB,UACE,0DATN,WAaE,SAAC,IAAD,CAAWnC,OAAQA,EAAQqC,QAASC,EAAAA,KACnC5B,EAAiB,MAChB,UAAC,IAAD,CAAM2B,QAASE,EAAAA,GAAf,iBACK,SAAC,MAAD,CAAWC,KAAM,cAM7BjD,IAAWD,EAAAA,GAAAA,WACV,+EAAuDgB,EAAvD,OAEDf,IAAWD,EAAAA,GAAAA,UACV,qEAIP,C","sources":["pages/Home/Home.jsx"],"sourcesContent":["import { getTrending, STATUS } from 'serviceAPI/fetch';\nimport MovieList from 'components/MovieList/MovieList';\nimport { GoUp } from 'pages/Movies/Movies.styled';\nimport { HiArrowUp } from 'react-icons/hi';\nimport { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {\n  scrollPos,\n  scrollTop,\n  resetScrollPos,\n  handleScroll,\n} from 'utils/scroll';\n\nconst Home = () => {\n  const [status, setStatus] = useState(STATUS.idle);\n  const [movies, setMovies] = useState([\n    {\n      id: 0,\n      poster_path: null,\n      title: '',\n      original_title: '',\n      release_date: '',\n      vote_average: 0,\n      vote_count: 0,\n    },\n  ]);\n  const [pages, setPages] = useState(2);\n  const [totalPages, setTotalPages] = useState(2);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n\n  const [scrollPosition, setScrollPosition] = useState(0);\n\n  useEffect(() => {\n    setStatus(STATUS.pending);\n    async function fetchData() {\n      try {\n        getTrending(1).then(info => {\n          setTotalPages(info.total_pages);\n          setMovies(info.results);\n        });\n        setStatus(STATUS.resolved);\n      } catch (error) {\n        setError(error);\n        setStatus(STATUS.rejected);\n      }\n    }\n    fetchData();\n\n    window.addEventListener('scroll', handleScroll(setScrollPosition));\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll(setScrollPosition));\n    };\n  }, []);\n\n  console.log(scrollPosition);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        if (pages <= totalPages / 100) {\n          const arrayOfMovies = await getTrending(pages).then(r => r.results);\n          setMovies(i => [...i, ...arrayOfMovies]);\n        }\n      } catch (error) {\n        setError(error);\n      }\n    }\n    fetchData();\n  }, [pages, totalPages]);\n\n  const fetchMoreData = () => {\n    setPages(i => i + 1);\n  };\n\n  const reachTheEnd = () => {\n    if (totalPages / 100 === pages) {\n      setHasMore(false);\n    }\n  };\n  reachTheEnd();\n\n  resetScrollPos(scrollPosition);\n\n  return (\n    <>\n      {status === STATUS.resolved && (\n        <>\n          <h1>Trending today</h1>\n          <InfiniteScroll\n            dataLength={movies.length}\n            next={fetchMoreData}\n            // scrollThreshold={1}\n            height={1400}\n            hasMore={hasMore}\n            loader={<h4 style={{ textAlign: 'center' }}>Loading...</h4>}\n            endMessage={\n              <p style={{ textAlign: 'center' }}>\n                <b>Yay! You have seen it all ;D</b>\n              </p>\n            }\n          >\n            <MovieList movies={movies} onClick={scrollPos} />\n            {scrollPosition > 1000 && (\n              <GoUp onClick={scrollTop}>\n                UP <HiArrowUp size={24} />\n              </GoUp>\n            )}\n          </InfiniteScroll>\n        </>\n      )}\n      {status === STATUS.rejected && (\n        <h3>Something went wrong on API... The messege error `{error}`</h3>\n      )}\n      {status === STATUS.pending && (\n        <h3>Please wait, information is loading...</h3>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["useState","STATUS","status","setStatus","id","poster_path","title","original_title","release_date","vote_average","vote_count","movies","setMovies","pages","setPages","totalPages","setTotalPages","error","setError","hasMore","setHasMore","scrollPosition","setScrollPosition","useEffect","getTrending","then","info","total_pages","results","fetchData","window","addEventListener","handleScroll","removeEventListener","console","log","r","arrayOfMovies","i","resetScrollPos","dataLength","length","next","height","loader","style","textAlign","endMessage","onClick","scrollPos","scrollTop","size"],"sourceRoot":""}