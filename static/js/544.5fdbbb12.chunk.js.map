{"version":3,"file":"static/js/544.5fdbbb12.chunk.js","mappings":"0OA4GA,UAvGa,WACX,OAA4BA,EAAAA,EAAAA,UAAS,CACnC,CACEC,GAAI,EACJC,YAAa,KACbC,MAAO,GACPC,eAAgB,GAChBC,aAAc,GACdC,aAAc,EACdC,WAAY,KARhB,eAAOC,EAAP,KAAeC,EAAf,KAWA,GAA0BT,EAAAA,EAAAA,UAAS,GAAnC,eAAOU,EAAP,KAAcC,EAAd,KACA,GAAoCX,EAAAA,EAAAA,UAAS,GAA7C,eAAOY,EAAP,KAAmBC,EAAnB,KACA,GAA0Bb,EAAAA,EAAAA,UAAS,MAAnC,eAAOc,EAAP,KAAcC,EAAd,KACA,GAA8Bf,EAAAA,EAAAA,WAAS,GAAvC,eAAOgB,EAAP,KAAgBC,EAAhB,MAIAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEgCC,EAAAA,EAAAA,IAAY,GAAGC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAAN,IAFrD,OAEUC,EAFV,OAGId,EAAUc,GACVZ,GAAS,SAAAa,GAAC,OAAIA,EAAI,CAAR,IAJd,gDAMIT,EAAS,EAAD,IANZ,0DADc,uBAAC,WAAD,wBAUdU,EAWD,GAAE,KACHP,EAAAA,EAAAA,YAAU,WAAM,wCACd,kGAEQR,GAASE,EAAa,GAF9B,iCAGkCO,EAAAA,EAAAA,IAAYT,GAAOU,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAAN,IAH3D,OAGYC,EAHZ,OAIMd,GAAU,SAAAe,GAAC,wBAAQA,IAAR,OAAcD,GAAd,IACXZ,GAAS,SAAAa,GAAC,OAAIA,EAAI,CAAR,IALhB,uDAQIT,EAAS,EAAD,IARZ,0DADc,uBAAC,WAAD,wBAYdU,EACD,GAAE,CAACf,EAAOE,IAuBX,OANMA,IAAeJ,EAAOkB,QACxBT,GAAW,IAMb,8BACa,OAAVH,GACC,iCACE,4CACA,SAAC,IAAD,CACEa,WAAYnB,EAAOkB,OACnBE,KA5BY,WAAM,wCAC1B,8GAE8BT,EAAAA,EAAAA,IAAYP,GAAYQ,MAChD,SAAAC,GAAC,OAAIA,EAAEQ,WAAN,IAHP,OAEUC,EAFV,OAKIjB,EAAciB,GALlB,gDAOIf,EAAS,EAAD,IAPZ,0DAD0B,uBAAC,WAAD,wBAW1BgB,EACD,EAiBSf,QAASA,EACTgB,QAAQ,eAAIC,MAAO,CAAEC,UAAW,UAAxB,wBACRC,YACE,cAAGF,MAAO,CAAEC,UAAW,UAAvB,UACE,0DAPN,UAWE,SAAC,IAAD,CAAW1B,OAAQA,UAIvB,+EAAuDM,EAAvD,QAIP,C,sBC1GD,SAASsB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO/B,GAEP,YADAyB,EAAOzB,EAET,CAEI8B,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOzB,KAAKoB,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["pages/Home/Home.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { getTrending } from 'serviceAPI/fetch';\nimport MovieList from 'components/MovieList/MovieList';\nimport { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([\n    {\n      id: 0,\n      poster_path: null,\n      title: '',\n      original_title: '',\n      release_date: '',\n      vote_average: 0,\n      vote_count: 0,\n    },\n  ]);\n  const [pages, setPages] = useState(2);\n  const [totalPages, setTotalPages] = useState(3);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n\n  // const [scrollPosition, setScrollPosition] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const arrayOfMovies = await getTrending(1).then(r => r.results);\n        setMovies(arrayOfMovies);\n        setPages(i => i + 1);\n      } catch (error) {\n        setError(error);\n      }\n    }\n    fetchData();\n    // const handleScroll = () => {\n    //   const position = window.pageYOffset;\n    //   setScrollPosition(position);\n    // };\n\n    // window.addEventListener('scroll', handleScroll);\n\n    // return () => {\n    //   window.removeEventListener('scroll', handleScroll);\n    // };\n  }, []);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        if (pages <= totalPages / 5) {\n          const arrayOfMovies = await getTrending(pages).then(r => r.results);\n          setMovies(i => [...i, ...arrayOfMovies]);\n          setPages(i => i + 1);\n        }\n      } catch (error) {\n        setError(error);\n      }\n    }\n    fetchData();\n  }, [pages, totalPages]);\n\n  const fetchMoreData = () => {\n    async function getTotalPages() {\n      try {\n        const objOfMovies = await getTrending(totalPages).then(\n          r => r.total_pages\n        );\n        setTotalPages(objOfMovies);\n      } catch (error) {\n        setError(error);\n      }\n    }\n    getTotalPages();\n  };\n\n  const reachTheEnd = () => {\n    if (totalPages === movies.length) {\n      setHasMore(false);\n    }\n  };\n  reachTheEnd();\n\n  return (\n    <>\n      {error === null ? (\n        <>\n          <h1>Trending today</h1>\n          <InfiniteScroll\n            dataLength={movies.length}\n            next={fetchMoreData}\n            hasMore={hasMore}\n            loader={<h4 style={{ textAlign: 'center' }}>Loading...</h4>}\n            endMessage={\n              <p style={{ textAlign: 'center' }}>\n                <b>Yay! You have seen it all ;D</b>\n              </p>\n            }\n          >\n            <MovieList movies={movies} />\n          </InfiniteScroll>\n        </>\n      ) : (\n        <h3>Something went wrong on API... The messege error `{error}`</h3>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","id","poster_path","title","original_title","release_date","vote_average","vote_count","movies","setMovies","pages","setPages","totalPages","setTotalPages","error","setError","hasMore","setHasMore","useEffect","getTrending","then","r","results","arrayOfMovies","i","fetchData","length","dataLength","next","total_pages","objOfMovies","getTotalPages","loader","style","textAlign","endMessage","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}